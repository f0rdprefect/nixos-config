# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."smarthome-hass" = {
    image = "ghcr.io/home-assistant/home-assistant:stable";
    environment = {
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/etc/localtime:/etc/localtime:ro"
      "/home/matt/docker/data/hass/config:/config:rw"
    ];
    ports = [
      "8123:8123/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=host"
      "--privileged"
    ];
  };
  systemd.services."podman-smarthome-hass" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-smarthome-root.target"
    ];
    wantedBy = [
      "podman-compose-smarthome-root.target"
    ];
  };
  virtualisation.oci-containers.containers."smarthome-mqtt" = {
    image = "docker.io/eclipse-mosquitto:1.6.12";
    environment = {
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/home/matt/docker/data/mqtt:/mosquitto:rw"
    ];
    ports = [
      "1883:1883/tcp"
      "9001:9001/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mqtt"
      "--network=smarthome_default"
    ];
  };
  systemd.services."podman-smarthome-mqtt" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-smarthome_default.service"
    ];
    requires = [
      "podman-network-smarthome_default.service"
    ];
    partOf = [
      "podman-compose-smarthome-root.target"
    ];
    wantedBy = [
      "podman-compose-smarthome-root.target"
    ];
  };
  # Networks
  systemd.services."podman-network-smarthome_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f smarthome_default";
    };
    script = ''
      podman network inspect smarthome_default || podman network create smarthome_default
    '';
    partOf = [ "podman-compose-smarthome-root.target" ];
    wantedBy = [ "podman-compose-smarthome-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-smarthome-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
